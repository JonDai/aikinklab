name: Performance Monitoring

on:
  schedule:
    # Run performance tests twice daily
    - cron: '0 6,18 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://www.aikinklab.com
            https://www.aikinklab.com/test
            https://www.aikinklab.com/bdsm-test
            https://www.aikinklab.com/lab
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Store Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
            lighthouse-results.json

  core-web-vitals:
    name: Core Web Vitals Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install tools
        run: |
          npm install -g web-vitals-cli
          npm install -g speedline

      - name: Measure Core Web Vitals
        run: |
          # Create performance monitoring script
          cat > measure-vitals.js << 'EOF'
          const puppeteer = require('puppeteer');
          const { getCLS, getFID, getFCP, getLCP, getTTFB } = require('web-vitals');
          
          async function measurePageVitals(url) {
            const browser = await puppeteer.launch({ headless: 'new' });
            const page = await browser.newPage();
            
            await page.goto(url, { waitUntil: 'networkidle2' });
            
            const vitals = await page.evaluate(() => {
              return new Promise((resolve) => {
                const results = {};
                
                getCLS((metric) => results.cls = metric.value);
                getFCP((metric) => results.fcp = metric.value);
                getLCP((metric) => results.lcp = metric.value);
                getTTFB((metric) => results.ttfb = metric.value);
                
                setTimeout(() => resolve(results), 3000);
              });
            });
            
            await browser.close();
            return { url, vitals };
          }
          
          const urls = [
            'https://www.aikinklab.com',
            'https://www.aikinklab.com/test',
            'https://www.aikinklab.com/bdsm-test'
          ];
          
          Promise.all(urls.map(measurePageVitals))
            .then(results => console.log(JSON.stringify(results, null, 2)));
          EOF
          
          npm install puppeteer web-vitals
          node measure-vitals.js > core-web-vitals.json || true

      - name: Upload Web Vitals results
        uses: actions/upload-artifact@v4
        with:
          name: core-web-vitals
          path: core-web-vitals.json

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run load tests
        run: |
          # Create comprehensive load test configuration
          cat > load-test-config.yml << 'EOF'
          config:
            target: 'https://www.aikinklab.com'
            phases:
              # Warm up phase
              - duration: 60
                arrivalRate: 5
                name: "Warm up"
              # Normal load
              - duration: 300
                arrivalRate: 20
                name: "Normal load"
              # Peak load simulation
              - duration: 120
                arrivalRate: 50
                name: "Peak load"
              # Cool down
              - duration: 60
                arrivalRate: 5
                name: "Cool down"
            processor: "./test-functions.js"
          
          scenarios:
            - name: 'Homepage visit'
              weight: 40
              requests:
                - get:
                    url: '/'
                    capture:
                      - json: $.title
                        as: pageTitle
                - think: 2
            
            - name: 'Take test flow'
              weight: 30
              requests:
                - get:
                    url: '/test'
                - think: 5
                - get:
                    url: '/bdsm-test'
                - think: 10
            
            - name: 'Browse lab content'
              weight: 20
              requests:
                - get:
                    url: '/lab'
                - think: 3
            
            - name: 'Static assets'
              weight: 10
              requests:
                - get:
                    url: '/sitemap.xml'
                - get:
                    url: '/robots.txt'
          EOF
          
          # Create test functions
          cat > test-functions.js << 'EOF'
          module.exports = {
            logResponse: function(context, next) {
              console.log('Response time:', context.vars.$responseTime);
              next();
            }
          };
          EOF
          
          artillery run load-test-config.yml --output load-test-results.json

      - name: Generate load test report
        run: |
          artillery report load-test-results.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html

  uptime-monitoring:
    name: Uptime and Availability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Website uptime check
        run: |
          # Multi-location uptime check
          urls=(
            "https://www.aikinklab.com"
            "https://www.aikinklab.com/test" 
            "https://www.aikinklab.com/bdsm-test"
            "https://www.aikinklab.com/lab"
            "https://www.aikinklab.com/sitemap.xml"
            "https://www.aikinklab.com/robots.txt"
          )
          
          results=()
          for url in "${urls[@]}"; do
            response_time=$(curl -w "%{time_total}" -s -o /dev/null "$url")
            http_code=$(curl -w "%{http_code}" -s -o /dev/null "$url")
            
            if [ "$http_code" = "200" ]; then
              status="✅ UP"
            else
              status="❌ DOWN ($http_code)"
            fi
            
            results+=("$url: $status (${response_time}s)")
          done
          
          echo "Uptime Check Results:"
          printf '%s\n' "${results[@]}" | tee uptime-results.txt

      - name: CDN performance check
        run: |
          # Test from multiple geographic locations using curl
          echo "Testing CDN performance..."
          
          # Test edge locations
          locations=("us-east-1" "us-west-2" "eu-west-1" "ap-southeast-1")
          
          for location in "${locations[@]}"; do
            echo "Testing from $location..."
            curl -w "Connect: %{time_connect}s, TTFB: %{time_starttransfer}s, Total: %{time_total}s\n" \
                 -s -o /dev/null https://www.aikinklab.com
          done

      - name: Upload monitoring results
        uses: actions/upload-artifact@v4
        with:
          name: uptime-monitoring
          path: uptime-results.txt

  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check bundle size
        run: |
          # Install bundle analyzer
          npm install -g bundlesize
          npm ci
          
          # Build and analyze
          npm run build
          
          # Check bundle sizes against budget
          echo "Checking bundle size budget..."
          
          # Create bundlesize config if not exists
          cat > .bundlesizerc << 'EOF'
          {
            "files": [
              {
                "path": ".next/static/js/*.js",
                "maxSize": "250kb",
                "compression": "gzip"
              },
              {
                "path": ".next/static/css/*.css", 
                "maxSize": "50kb",
                "compression": "gzip"
              }
            ]
          }
          EOF
          
          # Run bundle size check
          bundlesize || echo "Bundle size check completed"

      - name: Image optimization check
        run: |
          # Check image sizes in public directory
          echo "Checking image optimization..."
          find public -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.webp" \) -exec ls -lh {} \; | \
          awk '{print $5, $9}' | sort -hr > image-sizes.txt
          
          echo "Largest images:"
          head -10 image-sizes.txt

  notification:
    name: Performance Report
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, core-web-vitals, load-testing, uptime-monitoring, performance-budget]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate performance summary
        run: |
          echo "# Performance Monitoring Report" > performance-report.md
          echo "Generated on: $(date)" >> performance-report.md
          echo "" >> performance-report.md
          
          # Add Lighthouse results if available
          if [ -f lighthouse-results/lighthouse-results.json ]; then
            echo "## Lighthouse Scores" >> performance-report.md
            echo "Performance data collected and analyzed." >> performance-report.md
          fi
          
          # Add load test summary
          if [ -f load-test-results/load-test-results.json ]; then
            echo "## Load Test Results" >> performance-report.md
            echo "Load testing completed successfully." >> performance-report.md
          fi
          
          echo "## Actions Required" >> performance-report.md
          echo "- Review detailed results in individual job artifacts" >> performance-report.md
          echo "- Monitor Core Web Vitals trends" >> performance-report.md
          echo "- Optimize any performance bottlenecks identified" >> performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md