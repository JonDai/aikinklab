name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-and-integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unit-integration
        name: unit-integration-coverage

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results
        path: test-results/
        retention-days: 7

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Check bundle size
      run: |
        npm run build
        du -sh .next/static/chunks/* | sort -hr | head -10
        
        # Check if bundle size is reasonable (under 1MB for main chunk)
        MAIN_CHUNK_SIZE=$(find .next/static/chunks -name "main-*.js" -exec du -b {} + | awk '{sum+=$1} END {print sum}')
        if [ "$MAIN_CHUNK_SIZE" -gt 1048576 ]; then
          echo "Warning: Main bundle size is over 1MB ($MAIN_CHUNK_SIZE bytes)"
          exit 1
        fi

    - name: Test production build
      run: |
        npm run start &
        sleep 10
        curl -f http://localhost:3000/ || exit 1
        curl -f http://localhost:3000/test || exit 1
        curl -f http://localhost:3000/about || exit 1

  quality-gates:
    runs-on: ubuntu-latest
    needs: [unit-and-integration-tests, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Quality Gate Check
      run: |
        echo "All tests passed successfully!"
        echo "‚úÖ Unit tests"
        echo "‚úÖ Integration tests" 
        echo "‚úÖ E2E tests"
        echo "‚úÖ Build tests"
        echo "‚úÖ Security audit"
        
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ All quality gates passed!"
        echo "Ready for deployment"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Quality gates failed!"
        echo "Please review test failures before merging"
        exit 1